plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.8.0'
}
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

gradleLint {
    rules = ['unused-dependency']
}

repositories {
    jcenter()
}

def jacksonVersion = '2.10.2'
def junit5Version = '5.6.2'
def cucumberVersion = '6.0.0'

dependencies {
    implementation group: 'info.picocli', name: 'picocli', version: '4.3.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: cucumberVersion
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.16.1'
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events = ['skipped', 'passed', 'failed']
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
}

configurations.testImplementation.canBeResolved = true
configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'no/unit/transformer/features', 'src/test/resources']
        }
    }
}

task debugCucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'no/unit/transformer/features', 'src/test/resources']
            debugOptions {
                enabled = false
                suspend = true
                port = 5005
                server = true
            }
        }
    }
}

test.dependsOn(cucumber)
